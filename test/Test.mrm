data MaybeInt = Nothing [] | Just [Int];


fac = letrec fac(x: Int): Int = if x == 0 then 1 else x * fac (x - 1) in fac;

fac 1;
fac 2;
fac 3;
fac 4;
fac 5;
fac 6;
fac 7;

fib = letrec fib(x: Int): Int = if x == 0 || x == 1 then 1 else fib (x - 1) + fib (x - 2) in fib;

fib 0;
fib 1;
fib 2;
fib 3;
fib 4;
fib 5;
fib 6;
fib 7;
fib 8;

isEven = letrec isEven(x: Int): Bool = if x == 1 then false else if x == 0 then true else isEven(x - 2) in isEven;
isEven 0;
isEven 1;
isEven 2;
isEven 3;
isEven 4;
isEven 5;
isEven 6;
isEven 7;
isEven 8;

let
    flatMap = (x: MaybeInt) => case x of
        Nothing [] -> Nothing
      | Just [y] -> Just (y + 1)
    in case flatMap (Just 3) of
        Nothing [] -> 0
      | Just [t] -> t
;

3;
4;
